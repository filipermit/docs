{
    "npm": "# Navigate to your application's root directory    \n\ncd yourapp\nnpm install â€“-save @permitio/permit-js",
    "yarn": "yarn add @permitio/permit-js",
    "initialize_python": "import permit # should be at least version 1.1.3rc1 \n\npermit = permit.Permit(\n    token='permit_key_SECRET'\n)",
    "initialize_java": "import io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"<SET_API_KEY_HERE>\")\n        .withPdpAddress(\"http://localhost:7766\")\n        .withDebugMode(true)\n        .build()\n);\n",
    "initialize_dotnet": "using PermitSDK;\nPermit permit = new Permit(\n  permit_key_SECRET,\n  \"http://localhost:7766\",\n  \"default\",\n  true\n);",
    "initialize_node": "const { Permit } = require(\"permitio\");\n const permit = new Permit(\n    {token: permit_key_SECRET}\n);",
    "generic_login_as": "const response = await permit.elements.LoginAs(userId, tenantId)",
    "cookies_python": "from fastapi import FastAPI\n from starlette.responses import JSONResponse\n app = FastAPI()\n @app.get(\"/login_cookie\")\n async def login():\n     # get user from jwt\n     # user_id = get_user_from_jwt(request)\n     ticket = await permit.elements.login_as(USER, TENANT)\n     return JSONResponse(status_code=302, headers={\"Location\": ticket.redirect_url}, content={})\n ",
    "cookies_node": "const express = require(\"express\");\n const app = express();\n app.get(\"/login_cookie\", async (req, res) => {\n     // const user_key = get_user_from_jwt();\n     const ticket = await permit.elements.loginAs({userId: user_key, tenantId: TENANT});\n     res.status(302).redirect(ticket.redirect_url);\n });\n app.listen(port, () => {\n   console.log(`Example app listening at http://localhost:${port}`);\n });",
    "cookies_dotnet": "using PermitSDK;\n namespace PermitOnboardingApp\n {\n     class HttpServer\n     {\n         public static HttpListener listener;\n         public static string url = \"http://localhost:4000/login_cookie\";\n \n         public static async Task HandleIncomingConnections()\n         {\n             bool runServer = true;\n \n             while (runServer)\n                 HttpListenerContext ctx = await listener.GetContextAsync();\n                 HttpListenerResponse resp = ctx.Response;\n                 // In the next 4 lines we have the acutal code that is relevant to the Permit SDK\n                 // string testUserId = getUserIdFromJWT();\n                 EmbeddedLoginContentRequestOutput ticket = await permit.Elements.LoginAs(testUserId, TENANT_ID);\n                 resp.Redirect(ticket.RedirectUrl);\n                 resp.OutputStream.Close();\n             }\n         public static void Main(string[] args)\n         {\n             // Create a Http server and start listening for incoming connections\n             listener = new HttpListener();\n             listener.Prefixes.Add(url);\n             listener.Start();\n             Console.WriteLine(\"Listening for connections on {0}\", url);\n \n             // Handle requests\n             Task listenTask = HandleIncomingConnections();\n             listenTask.GetAwaiter().GetResult();\n \n             // Close the listener\n             listener.Close();\n         }\n     }\n }\n ",
    "cookies_java": "package com.example.myproject;\r\n\r\nimport io.permit.sdk.Permit;\r\nimport io.permit.sdk.PermitConfig;\r\nimport io.permit.sdk.api.PermitApiException;\r\nimport io.permit.sdk.api.models.UserLoginResponse;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.io.IOException;\r\n\r\n@RestController\r\n@SpringBootApplication\r\npublic class DemoApplication {\r\n\tPermit permit = new Permit(\r\n\t\t\tnew PermitConfig.Builder(\"<SET_API_KEY_HERE>\")\r\n\t\t\t\t\t.withPdpAddress(\"http:\/\/localhost:7766\")\r\n\t\t\t\t\t.withDebugMode(true)\r\n\t\t\t\t\t.build()\r\n\t);\r\n\r\n\t@GetMapping(\"\/login_cookie\")\r\n\tpublic ResponseEntity<Object> loginWithCookie() throws IOException, PermitApiException {\r\n    \/\/ String userId = getUserIdFromJWT();\r\n\t\tUserLoginResponse ticket = permit.elements.loginAs(userId, tenantId);\r\n\t\tHttpHeaders headers = new HttpHeaders();\r\n\t\theaders.add(\"Location\", ticket.redirectUrl);\r\n\t\treturn new ResponseEntity<>(ticket.content, headers, HttpStatus.FOUND);\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(DemoApplication.class, args);\r\n\t}\r\n}    ",
    "bearer_java": "package com.example.myproject;\r\n\r\nimport io.permit.sdk.Permit;\r\nimport io.permit.sdk.PermitConfig;\r\nimport io.permit.sdk.api.PermitApiException;\r\nimport io.permit.sdk.api.models.UserLoginResponse;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.io.IOException;\r\n\r\n@RestController\r\n@SpringBootApplication\r\npublic class DemoApplication {\r\n\tPermit permit = new Permit(\r\n\t\t\tnew PermitConfig.Builder(\"<SET_API_KEY_HERE>\")\r\n\t\t\t\t\t.withPdpAddress(\"http:\/\/localhost:7766\")\r\n\t\t\t\t\t.withDebugMode(true)\r\n\t\t\t\t\t.build()\r\n\t);\r\n\r\n\t@GetMapping(\"\/login_header\")\r\n\tpublic ResponseEntity<Object> loginWithHeader() throws IOException, PermitApiException {\r\n    \/\/ String userId = getUserIdFromJWT();\r\n\t\tUserLoginResponse ticket = permit.elements.loginAs(userId, tenantId);\r\n\t\treturn new ResponseEntity<>(ticket.content, HttpStatus.OK);\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(DemoApplication.class, args);\r\n\t}\r\n}",
    "bearer_python": "from fastapi import FastAPI\n from starlette.responses import JSONResponse\n app = FastAPI()\n \n \n @app.post(\"/login_header\")\n async def main():\n     # get user from jwt\n     # user_id = get_user_from_jwt(request)\n     ticket = await permit.elements.login_as(USER, TENANT)\n     return JSONResponse(content=ticket.content, status_code=200)",
    "bearer_node": "const express = require(\"express\");\n const app = express();\n app.get(\"/login_header\", async (req, res) => {\n     // const user_key = get_user_from_jwt();\n     const ticket = await permit.elements.loginAs({userId: user_key, tenantId: TENANT});\n     res.status(200).send(ticket.content);\n });\n app.listen(port, () => {\n   console.log(`Example app listening at http://localhost:${port}`);\n });",
    "bearer_dotnet": "using PermitSDK;\n namespace PermitOnboardingApp\n {\n     class HttpServer\n     {\n         public static HttpListener listener;\n         public static string url = \"http://localhost:4000/login_cookie\";\n         public static async Task HandleIncomingConnections()\n         {\n             bool runServer = true;\n             while (runServer)\n                 HttpListenerContext ctx = await listener.GetContextAsync();\n                 HttpListenerResponse resp = ctx.Response;\n                 // In the next 6 lines we have the acutal code that is relevant to the Permit SDK\n                 // string testUserId = getUserIdFromJWT();\n                 EmbeddedLoginContentRequestOutput ticket = await permit.Elements.LoginAs(testUserId, TENANT_ID);\n                 byte[] data = Encoding.UTF8.GetBytes(ticket.Content);\n                 resp.StatusCode = 200;\n                 await resp.OutputStream.WriteAsync(data, 0, data.Length);\n                 resp.OutputStream.Close();\n             }\n         public static void Main(string[] args)\n         {\n             // Create a Http server and start listening for incoming connections\n             listener = new HttpListener();\n             listener.Prefixes.Add(url);\n             listener.Start();\n             Console.WriteLine(\"Listening for connections on {0}\", url);\n             // Handle requests\n             Task listenTask = HandleIncomingConnections();\n             listenTask.GetAwaiter().GetResult();\n             // Close the listener\n             listener.Close();\n         }\n     }\n }\n ",
    "bearer": "@routes.get('/permit/login')\nasync def login(request):\n    tenant = request.query.get('tenant', 'default')\n    user_id = session.get_user_identifier(session)\n    token, url = await permit.elements.login_as(user_id, tenant)\n    url_obj = {'url': url}\n    return JsonResponse(text=f'{json.dumps(url_obj)}', content_type='application/json')",
    "loginHeaders": "permit.elements.login({\n    loginUrl: backendUrl,\n    tenant: 'your_tenant_key',\n    loginMethod: LoginMethod.bearer,\n    token: JWT_secret\n}).then((res: any) => {//optional handle success\n }).catch((err: any) => {//handle error\n});",
    "elementLogin": "permit.elements.login({\n    loginUrl: 'https://your_app_url.com/permit_login,\n    tenant: 'your_tenant_key',\n    token:'<TOKEN>',\n    loginMethod: LoginMethod.bearer\n}).then((res: any) => {//optional handle success\n }).catch((err: any) => {//handle error\n});",
    "frontendOnlyLogin": "permit.elements.login({\n loginMethod:LoginMethod.frontendOnly,\n userJwt: <YOUR_USER_JWT>,\n tenant:<YOUR_TENANT_KEY>,\n envId: <YOUR_ENV_ID>}).then((res: any) => {\n  console.log('success', res);\n}).catch((err: any) => {\n  // you can handle the error either here or in your BE\n  console.log('err', err);\n});",
    "elementLogout": "permit.elements.logout();",
    "loginDefault": "permit.elements.login({\n    loginUrl: 'https://your_app_url.com/permit_login,\n    tenant: 'your_tenant_key'\n}).then((res: any) => {//optional handle success\n }).catch((err: any) => {//handle error\n});",
    "other_headers": "permit.elements.login({\n    loginUrl: backendUrl,\n    tenant: 'your_tenant_key',\n    loginMethod: LoginMethod.header,\n    headers: {'<secure header name>': 'secret'}\n}).then((res: any) => {//optional handle success\n }).catch((err: any) => {//handle error\n});"
}